// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;
var BitFlags$DarkgamingRescriptTerrariapacket = require("../BitFlags.bs.js");
var PacketType$DarkgamingRescriptTerrariapacket = require("../PacketType.bs.js");

function parse(payload) {
  var reader = new Packetreader(payload);
  var playerId = reader.readByte();
  var controlFlags = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var miscFlags1 = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var miscFlags2 = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var miscFlags3 = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var control_isHoldingUp = BitFlags$DarkgamingRescriptTerrariapacket.flag1(controlFlags);
  var control_isHoldingDown = BitFlags$DarkgamingRescriptTerrariapacket.flag2(controlFlags);
  var control_isHoldingLeft = BitFlags$DarkgamingRescriptTerrariapacket.flag3(controlFlags);
  var control_isHoldingRight = BitFlags$DarkgamingRescriptTerrariapacket.flag4(controlFlags);
  var control_isHoldingJump = BitFlags$DarkgamingRescriptTerrariapacket.flag5(controlFlags);
  var control_isHoldingItemUse = BitFlags$DarkgamingRescriptTerrariapacket.flag6(controlFlags);
  var control = {
    isHoldingUp: control_isHoldingUp,
    isHoldingDown: control_isHoldingDown,
    isHoldingLeft: control_isHoldingLeft,
    isHoldingRight: control_isHoldingRight,
    isHoldingJump: control_isHoldingJump,
    isHoldingItemUse: control_isHoldingItemUse
  };
  var direction = BitFlags$DarkgamingRescriptTerrariapacket.flag7(controlFlags) ? /* Right */1 : /* Left */0;
  var pulleyDirection = BitFlags$DarkgamingRescriptTerrariapacket.flag1(miscFlags1) ? (
      BitFlags$DarkgamingRescriptTerrariapacket.flag2(miscFlags1) ? /* Two */1 : /* One */0
    ) : undefined;
  var vortexStealthActive = BitFlags$DarkgamingRescriptTerrariapacket.flag4(miscFlags1);
  var gravityDirection = BitFlags$DarkgamingRescriptTerrariapacket.flag5(miscFlags1) ? /* Normal */0 : /* Inverted */1;
  var shouldGuard = BitFlags$DarkgamingRescriptTerrariapacket.flag6(miscFlags1);
  var ghost = BitFlags$DarkgamingRescriptTerrariapacket.flag7(miscFlags1);
  var selectedItem = reader.readByte();
  var position_x = reader.readSingle();
  var position_y = reader.readSingle();
  var position = {
    x: position_x,
    y: position_y
  };
  var velocity = BitFlags$DarkgamingRescriptTerrariapacket.flag3(miscFlags1) ? ({
        x: reader.readSingle(),
        y: reader.readSingle()
      }) : undefined;
  var potionOfReturn = BitFlags$DarkgamingRescriptTerrariapacket.flag7(miscFlags2) ? ({
        originalUsePosition: {
          x: reader.readSingle(),
          y: reader.readSingle()
        },
        homePosition: {
          x: reader.readSingle(),
          y: reader.readSingle()
        }
      }) : undefined;
  var tryKeepingHoveringUp = BitFlags$DarkgamingRescriptTerrariapacket.flag1(miscFlags2);
  var isVoidVaultEnabled = BitFlags$DarkgamingRescriptTerrariapacket.flag2(miscFlags2);
  var isSitting = BitFlags$DarkgamingRescriptTerrariapacket.flag3(miscFlags2);
  var hasFinishedAnyDd2Event = BitFlags$DarkgamingRescriptTerrariapacket.flag4(miscFlags2);
  var isPettingAnimal = BitFlags$DarkgamingRescriptTerrariapacket.flag5(miscFlags2);
  var isTheAnimalBeingPetSmall = BitFlags$DarkgamingRescriptTerrariapacket.flag6(miscFlags2);
  var tryKeepingHoveringDown = BitFlags$DarkgamingRescriptTerrariapacket.flag8(miscFlags2);
  var isSleeping = BitFlags$DarkgamingRescriptTerrariapacket.flag1(miscFlags3);
  return {
          playerId: playerId,
          control: control,
          direction: direction,
          pulleyDirection: pulleyDirection,
          vortexStealthActive: vortexStealthActive,
          gravityDirection: gravityDirection,
          shouldGuard: shouldGuard,
          ghost: ghost,
          selectedItem: selectedItem,
          position: position,
          velocity: velocity,
          potionOfReturn: potionOfReturn,
          tryKeepingHoveringUp: tryKeepingHoveringUp,
          isVoidVaultEnabled: isVoidVaultEnabled,
          isSitting: isSitting,
          hasFinishedAnyDd2Event: hasFinishedAnyDd2Event,
          isPettingAnimal: isPettingAnimal,
          isTheAnimalBeingPetSmall: isTheAnimalBeingPetSmall,
          tryKeepingHoveringDown: tryKeepingHoveringDown,
          isSleeping: isSleeping
        };
}

function packControlFlags(writer, control, direction) {
  return writer.packByte(BitFlags$DarkgamingRescriptTerrariapacket.toByte(BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(control.isHoldingUp, control.isHoldingDown, control.isHoldingLeft, control.isHoldingRight, control.isHoldingJump, control.isHoldingItemUse, direction ? true : false, false)));
}

function packMiscFlags1(writer, pulleyDirection, velocity, vortexStealthActive, gravityDirection, shouldGuard, ghost) {
  return writer.packByte(BitFlags$DarkgamingRescriptTerrariapacket.toByte(BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(pulleyDirection !== undefined, pulleyDirection !== undefined && pulleyDirection ? true : false, velocity !== undefined, vortexStealthActive, gravityDirection ? false : true, shouldGuard, ghost, false)));
}

function packMiscFlags2(writer, tryKeepingHoveringUp, isVoidVaultEnabled, isSitting, hasFinishedAnyDd2Event, isPettingAnimal, isTheAnimalBeingPetSmall, potionOfReturn, tryKeepingHoveringDown) {
  return writer.packByte(BitFlags$DarkgamingRescriptTerrariapacket.toByte(BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(tryKeepingHoveringUp, isVoidVaultEnabled, isSitting, hasFinishedAnyDd2Event, isPettingAnimal, isTheAnimalBeingPetSmall, potionOfReturn !== undefined, tryKeepingHoveringDown)));
}

function packMiscFlags3(writer, isSleeping) {
  return writer.packByte(BitFlags$DarkgamingRescriptTerrariapacket.toByte(BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(isSleeping, false, false, false, false, false, false, false)));
}

function packPotionOfReturn(writer, potionOfReturn) {
  if (potionOfReturn !== undefined) {
    return writer.packSingle(potionOfReturn.originalUsePosition.x).packSingle(potionOfReturn.originalUsePosition.y).packSingle(potionOfReturn.homePosition.x).packSingle(potionOfReturn.homePosition.y);
  } else {
    return writer;
  }
}

function toBuffer(self) {
  return packPotionOfReturn(packMiscFlags3(packMiscFlags2(packMiscFlags1(packControlFlags(ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$DarkgamingRescriptTerrariapacket.toInt(/* PlayerUpdate */12)), self.control, self.direction), self.pulleyDirection, self.velocity, self.vortexStealthActive, self.gravityDirection, self.shouldGuard, self.ghost), self.tryKeepingHoveringUp, self.isVoidVaultEnabled, self.isSitting, self.hasFinishedAnyDd2Event, self.isPettingAnimal, self.isTheAnimalBeingPetSmall, self.potionOfReturn, self.tryKeepingHoveringDown), self.isSleeping).packByte(self.selectedItem).packSingle(self.position.x).packSingle(self.position.y), self.potionOfReturn).data;
}

exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
