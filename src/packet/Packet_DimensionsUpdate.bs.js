// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function toInt(self) {
  return self;
}

function fromInt(n) {
  switch (n) {
    case 0 :
        return /* RealIpAddress */0;
    case 1 :
        return /* GamemodesJoinMode */1;
    case 2 :
        return /* SwitchServer */2;
    case 3 :
        return /* SwitchServerManual */3;
    default:
      return ;
  }
}

var UpdateType = {
  toInt: toInt,
  fromInt: fromInt
};

function parse(payload) {
  var reader = new Packetreader(payload);
  var updateType = reader.readInt16();
  var match = fromInt(updateType);
  if (match === undefined) {
    return ;
  }
  switch (match) {
    case /* RealIpAddress */0 :
        var ip = reader.readString();
        return {
                TAG: /* RealIpAddress */0,
                _0: ip
              };
    case /* GamemodesJoinMode */1 :
        return /* GamemodesJoinMode */0;
    case /* SwitchServer */2 :
        var dimensionName = reader.readString();
        return {
                TAG: /* SwitchServer */1,
                _0: dimensionName
              };
    case /* SwitchServerManual */3 :
        var ip$1 = reader.readString();
        var port = reader.readUInt16();
        return {
                TAG: /* SwitchServerManual */2,
                _0: ip$1,
                _1: port
              };
    
  }
}

function toBuffer(self) {
  if (typeof self === "number") {
    return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* DimensionsUpdate */62)).packInt16(/* GamemodesJoinMode */1).data;
  }
  switch (self.TAG | 0) {
    case /* RealIpAddress */0 :
        var ip = self._0;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* DimensionsUpdate */62)).packInt16(/* RealIpAddress */0).packString(ip).data;
    case /* SwitchServer */1 :
        var dimensionName = self._0;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* DimensionsUpdate */62)).packInt16(/* SwitchServer */2).packString(dimensionName).data;
    case /* SwitchServerManual */2 :
        var ip$1 = self._0;
        var port = self._1;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* DimensionsUpdate */62)).packInt16(/* SwitchServerManual */3).packString(ip$1).packUInt16(port).data;
    
  }
}

exports.UpdateType = UpdateType;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
