// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;
var BitFlags$DarkgamingRescriptTerrariapacket = require("../BitFlags.bs.js");
var PacketType$DarkgamingRescriptTerrariapacket = require("../PacketType.bs.js");

function parse(payload) {
  var reader = new Packetreader(payload);
  var max = reader.readInt32();
  var text = reader.readNetworkText();
  var flags = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  return {
          max: max,
          text: text,
          flags: {
            hideStatusTextPercent: BitFlags$DarkgamingRescriptTerrariapacket.flag1(flags),
            statusTextHasShadows: BitFlags$DarkgamingRescriptTerrariapacket.flag2(flags),
            runCheckBytes: BitFlags$DarkgamingRescriptTerrariapacket.flag3(flags)
          }
        };
}

function flagsToByte(flags) {
  var $$byte = 0;
  $$byte = $$byte | (
    flags.hideStatusTextPercent ? 1 : 0
  );
  $$byte = $$byte | (
    flags.statusTextHasShadows ? 2 : 0
  );
  $$byte = $$byte | (
    flags.runCheckBytes ? 4 : 0
  );
  return $$byte;
}

function toBuffer(self) {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$DarkgamingRescriptTerrariapacket.toInt("Status")).packInt32(self.max).packNetworkText(self.text).packByte(flagsToByte(self.flags)).data;
}

exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
