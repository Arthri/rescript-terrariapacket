// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readUInt16(prim) {
  return prim.readUInt16();
}

function readInt32(prim) {
  return prim.readInt32();
}

function readByte(prim) {
  return prim.readByte();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var playerId = reader.readByte();
  var buff = reader.readUInt16();
  var time = reader.readInt32();
  return {
          playerId: playerId,
          buff: buff,
          time: time
        };
}

var Decode = {
  readUInt16: readUInt16,
  readInt32: readInt32,
  readByte: readByte,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packUInt16(prim0, prim1) {
  return prim0.packUInt16(prim1);
}

function packInt32(prim0, prim1) {
  return prim0.packInt32(prim1);
}

function data(prim) {
  return prim.data;
}

function toBuffer(self) {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* PlayerBuffAdd */50)).packByte(self.playerId).packUInt16(self.buff).packInt32(self.time).data;
}

var Encode = {
  packByte: packByte,
  packUInt16: packUInt16,
  packInt32: packInt32,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  toBuffer: toBuffer
};

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
