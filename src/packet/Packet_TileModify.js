// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../PacketType.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function fromInt(action) {
  switch (action) {
    case 0 :
        return /* KillTile */0;
    case 1 :
        return /* PlaceTile */1;
    case 2 :
        return /* KillWall */2;
    case 3 :
        return /* PlaceWall */3;
    case 4 :
        return /* KillTileNoItem */4;
    case 5 :
        return /* PlaceWire */5;
    case 6 :
        return /* KillWire */6;
    case 7 :
        return /* PoundTile */7;
    case 8 :
        return /* PlaceActuator */8;
    case 9 :
        return /* KillActuator */9;
    case 10 :
        return /* PlaceWire2 */10;
    case 11 :
        return /* KillWire2 */11;
    case 12 :
        return /* PlaceWire3 */12;
    case 13 :
        return /* KillWire3 */13;
    case 14 :
        return /* SlopeTile */14;
    case 15 :
        return /* FrameTrack */15;
    case 16 :
        return /* PlaceWire4 */16;
    case 17 :
        return /* KillWire4 */17;
    case 18 :
        return /* PokeLogicGate */18;
    case 19 :
        return /* Actuate */19;
    case 20 :
        return /* KillTile2 */20;
    case 21 :
        return /* ReplaceTile */21;
    case 22 :
        return /* ReplaceWall */22;
    case 23 :
        return /* SlopePoundTile */23;
    default:
      return ;
  }
}

function toInt(action) {
  return action;
}

var Action = {
  fromInt: fromInt,
  toInt: toInt
};

function readInt16(prim) {
  return prim.readInt16();
}

function readByte(prim) {
  return prim.readByte();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var action = fromInt(reader.readByte());
  var tileX = reader.readInt16();
  var tileY = reader.readInt16();
  var value1 = reader.readInt16();
  var value2 = reader.readByte();
  if (action !== undefined) {
    return {
            action: action,
            tileX: tileX,
            tileY: tileY,
            value1: value1,
            value2: value2
          };
  }
  
}

var Decode = {
  readInt16: readInt16,
  readByte: readByte,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packInt16(prim0, prim1) {
  return prim0.packInt16(prim1);
}

function data(prim) {
  return prim.data;
}

function toBuffer(self) {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* TileModify */15)).packByte(self.action).packInt16(self.tileX).packInt16(self.tileY).packInt16(self.value1).packByte(self.value2).data;
}

var Encode = {
  packByte: packByte,
  packInt16: packInt16,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  toBuffer: toBuffer
};

exports.Action = Action;
exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
