// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;
var PacketType$DarkgamingRescriptTerrariapacket = require("../PacketType.bs.js");

function toInt(action) {
  return action;
}

function fromInt(action) {
  switch (action) {
    case 0 :
        return /* PlaceChest */0;
    case 1 :
        return /* KillChest */1;
    case 2 :
        return /* PlaceDresser */2;
    case 3 :
        return /* KillDresser */3;
    case 4 :
        return /* PlaceContainer */4;
    case 5 :
        return /* KillContainer */5;
    default:
      return ;
  }
}

function toString(action) {
  switch (action) {
    case /* PlaceChest */0 :
        return "PlaceChest";
    case /* KillChest */1 :
        return "KillChest";
    case /* PlaceDresser */2 :
        return "PlaceDresser";
    case /* KillDresser */3 :
        return "KillDresser";
    case /* PlaceContainer */4 :
        return "PlaceContainer";
    case /* KillContainer */5 :
        return "KillContainer";
    
  }
}

var Action = {
  toInt: toInt,
  fromInt: fromInt,
  toString: toString
};

function parse(payload) {
  var reader = new Packetreader(payload);
  var action = fromInt(reader.readByte());
  var x = reader.readInt16();
  var y = reader.readInt16();
  var style = reader.readInt16();
  var id = reader.readInt16();
  if (action !== undefined) {
    return {
            action: action,
            x: x,
            y: y,
            style: style,
            id: id
          };
  }
  
}

function packAction(writer, action) {
  return writer.packByte(action);
}

function toBuffer(self) {
  return packAction(ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$DarkgamingRescriptTerrariapacket.toInt(/* ChestPlace */30)), self.action).packInt16(self.x).packInt16(self.y).packInt16(self.style).packByte(self.id).data;
}

exports.Action = Action;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
