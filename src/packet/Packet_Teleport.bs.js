// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;
var BitFlags$DarkgamingRescriptTerrariapacket = require("../BitFlags.bs.js");
var PacketType$DarkgamingRescriptTerrariapacket = require("../PacketType.bs.js");

function readByte(prim) {
  return prim.readByte();
}

function readInt16(prim) {
  return prim.readInt16();
}

function readSingle(prim) {
  return prim.readSingle();
}

function readInt32(prim) {
  return prim.readInt32();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var flags = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var getPositionFromTarget = BitFlags$DarkgamingRescriptTerrariapacket.flag3(flags);
  var match = BitFlags$DarkgamingRescriptTerrariapacket.flag1(flags);
  var match$1 = BitFlags$DarkgamingRescriptTerrariapacket.flag2(flags);
  var teleportType = match ? (
      match$1 ? undefined : /* Npc */1
    ) : (
      match$1 ? /* PlayerToPlayer */2 : /* Player */0
    );
  var targetId = reader.readInt16();
  var x = reader.readSingle();
  var y = reader.readSingle();
  var style = reader.readByte();
  var extraInfo = BitFlags$DarkgamingRescriptTerrariapacket.flag4(flags) ? reader.readInt32() : undefined;
  if (teleportType !== undefined) {
    return {
            teleportType: teleportType,
            getPositionFromTarget: getPositionFromTarget,
            targetId: targetId,
            x: x,
            y: y,
            style: style,
            extraInfo: extraInfo
          };
  }
  
}

var Decode = {
  readByte: readByte,
  readInt16: readInt16,
  readSingle: readSingle,
  readInt32: readInt32,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packInt16(prim0, prim1) {
  return prim0.packInt16(prim1);
}

function packSingle(prim0, prim1) {
  return prim0.packSingle(prim1);
}

function packInt32(prim0, prim1) {
  return prim0.packInt32(prim1);
}

function data(prim) {
  return prim.data;
}

function getFlags(self) {
  return BitFlags$DarkgamingRescriptTerrariapacket.toByte(BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(self.teleportType === /* Npc */1, self.teleportType === /* PlayerToPlayer */2, self.getPositionFromTarget, Belt_Option.isSome(self.extraInfo), false, false, false, false));
}

function toBuffer(self) {
  var writer = ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$DarkgamingRescriptTerrariapacket.toInt(/* Teleport */60)).packByte(getFlags(self)).packInt16(self.targetId).packSingle(self.x).packSingle(self.y).packByte(self.style);
  var extraInfo = self.extraInfo;
  if (extraInfo !== undefined) {
    writer.packInt32(extraInfo);
  }
  return writer.data;
}

var Encode = {
  packByte: packByte,
  packInt16: packInt16,
  packSingle: packSingle,
  packInt32: packInt32,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  getFlags: getFlags,
  toBuffer: toBuffer
};

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
