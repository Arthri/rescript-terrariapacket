// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;
var PacketType$DarkgamingRescriptTerrariapacket = require("../PacketType.bs.js");

function parse(payload) {
  var reader = new Packetreader(payload);
  var playerId = reader.readByte();
  var x = reader.readInt16();
  var y = reader.readInt16();
  var timeRemaining = reader.readInt32();
  var rawContext = reader.readByte();
  var context;
  switch (rawContext) {
    case 0 :
        context = "ReviveFromDeath";
        break;
    case 1 :
        context = "SpawningIntoWorld";
        break;
    case 2 :
        context = "RecallFromItem";
        break;
    default:
      context = undefined;
  }
  if (context !== undefined) {
    return {
            playerId: playerId,
            x: x,
            y: y,
            timeRemaining: timeRemaining,
            context: context
          };
  }
  
}

function toBuffer(self) {
  var match = self.context;
  var tmp;
  switch (match) {
    case "ReviveFromDeath" :
        tmp = 0;
        break;
    case "SpawningIntoWorld" :
        tmp = 1;
        break;
    case "RecallFromItem" :
        tmp = 2;
        break;
    
  }
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$DarkgamingRescriptTerrariapacket.toInt("PlayerSpawn")).packByte(self.playerId).packInt16(self.x).packInt16(self.y).packInt32(self.timeRemaining).packByte(tmp).data;
}

exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
