// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readInt16(prim) {
  return prim.readInt16();
}

function readByte(prim) {
  return prim.readByte();
}

function readSByte(prim) {
  return prim.readSByte();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var x = reader.readInt16();
  var y = reader.readInt16();
  var objectType = reader.readInt16();
  var style = reader.readInt16();
  var alternate = reader.readByte();
  var random = reader.readSByte();
  var match = reader.readByte();
  var direction = match !== 0 ? /* Right */1 : /* Left */0;
  return {
          x: x,
          y: y,
          objectType: objectType,
          style: style,
          alternate: alternate,
          random: random,
          direction: direction
        };
}

var Decode = {
  readInt16: readInt16,
  readByte: readByte,
  readSByte: readSByte,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packInt16(prim0, prim1) {
  return prim0.packInt16(prim1);
}

function packSByte(prim0, prim1) {
  return prim0.packSByte(prim1);
}

function data(prim) {
  return prim.data;
}

function toBuffer(self) {
  var match = self.direction;
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* ObjectPlace */74)).packInt16(self.x).packInt16(self.y).packInt16(self.objectType).packInt16(self.style).packByte(self.alternate).packSByte(self.random).packByte(match ? 1 : 0).data;
}

var Encode = {
  Writer: undefined,
  packByte: packByte,
  packInt16: packInt16,
  packSByte: packSByte,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  toBuffer: toBuffer
};

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
