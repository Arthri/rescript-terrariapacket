// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../PacketType.mjs");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.mjs");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function toInt(self) {
  switch (self) {
    case "RealIpAddress" :
        return 0;
    case "GamemodesJoinMode" :
        return 1;
    case "SwitchServer" :
        return 2;
    case "SwitchServerManual" :
        return 3;
    
  }
}

function fromInt(n) {
  switch (n) {
    case 0 :
        return "RealIpAddress";
    case 1 :
        return "GamemodesJoinMode";
    case 2 :
        return "SwitchServer";
    case 3 :
        return "SwitchServerManual";
    default:
      return ;
  }
}

var UpdateType = {
  toInt: toInt,
  fromInt: fromInt
};

function parse(payload) {
  var reader = new Packetreader(payload);
  var updateType = reader.readInt16();
  var match = fromInt(updateType);
  if (match === undefined) {
    return ;
  }
  switch (match) {
    case "RealIpAddress" :
        var ip = reader.readString();
        return {
                TAG: "RealIpAddress",
                _0: ip
              };
    case "GamemodesJoinMode" :
        return "GamemodesJoinMode";
    case "SwitchServer" :
        var dimensionName = reader.readString();
        return {
                TAG: "SwitchServer",
                _0: dimensionName
              };
    case "SwitchServerManual" :
        var ip$1 = reader.readString();
        var port = reader.readUInt16();
        return {
                TAG: "SwitchServerManual",
                _0: ip$1,
                _1: port
              };
    
  }
}

function gamemodesJoinModeToBuffer() {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("DimensionsUpdate")).packInt16(1).data;
}

function toBuffer(self) {
  if (typeof self !== "object") {
    return gamemodesJoinModeToBuffer();
  }
  switch (self.TAG) {
    case "RealIpAddress" :
        var ip = self._0;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("DimensionsUpdate")).packInt16(0).packString(ip).data;
    case "SwitchServer" :
        var dimensionName = self._0;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("DimensionsUpdate")).packInt16(2).packString(dimensionName).data;
    case "SwitchServerManual" :
        var ip$1 = self._0;
        var port = self._1;
        return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("DimensionsUpdate")).packInt16(3).packString(ip$1).packUInt16(port).data;
    
  }
}

exports.UpdateType = UpdateType;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
