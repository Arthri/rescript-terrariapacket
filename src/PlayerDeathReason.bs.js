// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var BitFlags$DarkgamingRescriptTerrariapacket = require("./BitFlags.bs.js");

function otherFromByte($$byte) {
  switch ($$byte) {
    case 0 :
        return /* FallDamage */0;
    case 1 :
        return /* Drowning */1;
    case 2 :
        return /* Lava */2;
    case 3 :
        return /* FallDamage2 */3;
    case 4 :
        return /* DemonAltar */4;
    case 5 :
        return /* CompanionCube */5;
    case 6 :
        return /* Suffocation */6;
    case 7 :
        return /* Burning */7;
    case 8 :
        return /* Poison */8;
    case 9 :
        return /* Electrified */9;
    case 10 :
        return /* WallOfFleshEscape */10;
    case 11 :
        return /* WallOfFleshLicked */11;
    case 12 :
        return /* ChaosState */12;
    case 13 :
        return /* ChaosState2Male */13;
    case 14 :
        return /* ChaosState3Female */14;
    default:
      return ;
  }
}

function readDeathReason(reader) {
  var reasonType = BitFlags$DarkgamingRescriptTerrariapacket.fromByte(reader.readByte());
  var killerPlayerId = BitFlags$DarkgamingRescriptTerrariapacket.flag1(reasonType) ? reader.readByte() : undefined;
  var killerNpcId = BitFlags$DarkgamingRescriptTerrariapacket.flag2(reasonType) ? reader.readInt16() : undefined;
  var killerProjectileId = BitFlags$DarkgamingRescriptTerrariapacket.flag3(reasonType) ? reader.readInt16() : undefined;
  var typeOfDeathOther = BitFlags$DarkgamingRescriptTerrariapacket.flag4(reasonType) ? otherFromByte(reader.readByte()) : undefined;
  var projectileType = BitFlags$DarkgamingRescriptTerrariapacket.flag5(reasonType) ? reader.readInt16() : undefined;
  var itemType = BitFlags$DarkgamingRescriptTerrariapacket.flag6(reasonType) ? reader.readInt16() : undefined;
  var itemPrefix = BitFlags$DarkgamingRescriptTerrariapacket.flag7(reasonType) ? reader.readByte() : undefined;
  var deathReason = BitFlags$DarkgamingRescriptTerrariapacket.flag8(reasonType) ? reader.readString() : undefined;
  return {
          killerPlayerId: killerPlayerId,
          killerNpcId: killerNpcId,
          killerProjectileId: killerProjectileId,
          typeOfDeathOther: typeOfDeathOther,
          projectileType: projectileType,
          itemType: itemType,
          itemPrefix: itemPrefix,
          deathReason: deathReason
        };
}

function packFlags(writer, self) {
  var flags = BitFlags$DarkgamingRescriptTerrariapacket.fromFlags(Belt_Option.isSome(self.killerPlayerId), Belt_Option.isSome(self.killerNpcId), Belt_Option.isSome(self.killerProjectileId), Belt_Option.isSome(self.typeOfDeathOther), Belt_Option.isSome(self.projectileType), Belt_Option.isSome(self.itemType), Belt_Option.isSome(self.itemPrefix), Belt_Option.isSome(self.deathReason));
  return writer.packByte(BitFlags$DarkgamingRescriptTerrariapacket.toByte(flags));
}

function packKillerPlayerId(writer, self) {
  var killerPlayerId = self.killerPlayerId;
  if (killerPlayerId !== undefined) {
    return writer.packByte(killerPlayerId);
  } else {
    return writer;
  }
}

function packKillerNpcId(writer, self) {
  var killerNpcId = self.killerNpcId;
  if (killerNpcId !== undefined) {
    return writer.packInt16(killerNpcId);
  } else {
    return writer;
  }
}

function packKillerProjectileId(writer, self) {
  var killerProjectileId = self.killerProjectileId;
  if (killerProjectileId !== undefined) {
    return writer.packInt16(killerProjectileId);
  } else {
    return writer;
  }
}

function packTypeOfDeathOther(writer, self) {
  var typeOfDeathOther = self.typeOfDeathOther;
  if (typeOfDeathOther !== undefined) {
    return writer.packByte(typeOfDeathOther);
  } else {
    return writer;
  }
}

function packProjectileType(writer, self) {
  var projectileType = self.projectileType;
  if (projectileType !== undefined) {
    return writer.packInt16(projectileType);
  } else {
    return writer;
  }
}

function packItemType(writer, self) {
  var itemType = self.itemType;
  if (itemType !== undefined) {
    return writer.packInt16(itemType);
  } else {
    return writer;
  }
}

function packItemPrefix(writer, self) {
  var itemPrefix = self.itemPrefix;
  if (itemPrefix !== undefined) {
    return writer.packByte(itemPrefix);
  } else {
    return writer;
  }
}

function pack(writer, self) {
  var writer$1 = packItemPrefix(packItemType(packProjectileType(packTypeOfDeathOther(packKillerProjectileId(packKillerNpcId(packKillerPlayerId(packFlags(writer, self), self), self), self), self), self), self), self);
  var deathReason = self.deathReason;
  if (deathReason !== undefined) {
    return writer$1.packString(deathReason);
  } else {
    return writer$1;
  }
}

var packDeathReason = pack;

exports.readDeathReason = readDeathReason;
exports.packDeathReason = packDeathReason;
/* No side effect */
